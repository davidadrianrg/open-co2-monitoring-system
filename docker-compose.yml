#Docker-compose file to deploy services automatically in the cloud

version: "3.3"

services: 
  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto
    restart: unless-stopped
    user: root
    ports:
      - 9000:1883
    environment: 
      - MOSQUITTO_USERNAME=${MOSQUITTO_USERNAME}
      - MOSQUITTO_PASSWORD=${MOSQUITTO_PASSWORD}
    volumes:
      - ./volumes/mosquitto/data:/mosquitto/data
      - ./volumes/mosquitto/log:/mosquitto/log
      - ./volumes/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./volumes/mosquitto/config/passwd:/mosquitto/config/passwd:ro
  grafana:
    image: grafana/grafana:latest-ubuntu
    container_name: grafana
    restart: unless-stopped
    user: "0" 
    ports:
      - '9001:3000'
    volumes:
      - ./volumes/grafana/data:/var/lib/grafana
      - ./volumes/grafana/log:/var/log/grafana
    depends_on:
      - influxdb
    environment:
      - GF_PATHS_DATA=${GF_PATHS_DATA}
      - GF_PATHS_LOGS=${GF_PATHS_LOGS}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - TZ=Europe/Madrid
  influxdb:
    image: influxdb
    container_name: influxdb
    restart: unless-stopped
    ports:
      - 8086:8086
    volumes:
      - ./volumes/influxdb/data:/var/lib/influxdb
      - ./volumes/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - ./volumes/influxdb/init:/docker-entrypoint-initdb.d
    environment:
      - INFLUXDB_DB=co2sensor
      - INFLUXDB_USER=openCO2
      - INFLUXDB_ADMIN_ENABLED=true
      - INFLUXDB_ADMIN_USER=${INFLUXDB_USERNAME}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD} 
      - TZ=Europe/Madrid
  nodered:
      container_name: nodered
      image: nodered/node-red:latest
      restart: unless-stopped
      user: "0"
      privileged: true
      depends_on:
      - mosquitto
      - influxdb
      environment: 
        - TZ=Europe/Madrid
      ports:
        - 9002:1880
      volumes:
        - ./volumes/nodered/data:/data
  caddy:
     image: caddy
     ports:
     - "80:80"
     - "443:443"
     volumes:
     - ./volumes/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
     - ./volumes/caddy/data/caddy/data:/data
     - ./volumes/caddy/data/caddy/config:/config
     restart: unless-stopped
     container_name: caddy

